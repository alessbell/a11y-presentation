{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", _objectSpread({}, props));\n};\n\nconst SlidePage = makeShortcode(\"SlidePage\");\nconst layoutProps = {};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _objectSpread(_objectSpread(_objectSpread({}, layoutProps), props), {}, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(SlidePage, {\n    mdxType: \"SlidePage\"\n  }, mdx(\"h1\", null, `Elevate authoring with components`), mdx(\"p\", null, `Using MDX you can use components alongside your Markdown, like React or Web Components.`), mdx(\"hr\", null), mdx(\"button\", {\n    style: {\n      backgroundColor: \"transparent\",\n      color: \"#FFF\",\n      border: \"3px solid #FFF\",\n      borderRadius: \"6px\",\n      padding: \"1.5em 2em\",\n      fontSize: \"1em\"\n    }\n  }, \"Button with JSX\"), mdx(\"hr\", null), mdx(\"h2\", null, `Source of the last slide`), mdx(\"pre\", null, mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), `<button \n    style={{\n        backgroundColor:\"transparent\", \n        color: \"#FFF\", \n        border: \"3px solid #FFF\", \n        borderRadius: \"6px\", \n        padding: \"1.5em 2em\",\n        fontSize: \"1em\"\n    }}\n>Button with JSX</button>\n`)), mdx(\"hr\", null), mdx(\"p\", null, `Use other components by adding to `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `<MDXProvider>`)), mdx(\"pre\", null, mdx(\"code\", _objectSpread({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), `const mdComponents = {\n  h1: (props) => <Heading as=\"h1\" {...props} />,\n}\n`)), mdx(\"p\", null, mdx(\"a\", _objectSpread({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://mdxjs.com/getting-started#mdxprovider\"\n  }), `Check out the docs here`)), mdx(\"hr\", null), mdx(\"h2\", null, `Having issues?`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, `Check your syntax.`), ` `, mdx(\"em\", {\n    parentName: \"li\"\n  }, `JSX doesn't like things like unclosed tags.`), ` `), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, `Clear the cache and restart the server.`), ` `, mdx(\"em\", {\n    parentName: \"li\"\n  }, `MDX is like that sometimes.`)), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, `Check the MDX docs`), `. `, mdx(\"em\", {\n    parentName: \"li\"\n  }, `It's next level stuff.`)))));\n}\n;\nMDXContent.isMDXComponent = true;","map":null,"metadata":{},"sourceType":"module"}