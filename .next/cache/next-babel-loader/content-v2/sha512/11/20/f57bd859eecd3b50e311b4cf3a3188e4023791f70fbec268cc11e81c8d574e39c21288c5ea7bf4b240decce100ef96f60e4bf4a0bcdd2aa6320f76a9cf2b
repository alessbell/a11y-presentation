{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { useCurrentSlide } from '../context/CurrentSlideContext';\nconst keys = {\n  slide: 'next-mdx-deck-slide',\n  page: 'next-mdx-deck-page'\n};\nexport const useStorage = () => {\n  const {\n    currentSlide,\n    setSlide\n  } = useCurrentSlide();\n  const router = useRouter();\n  const currentPage = router.query && 'slide' in router.query && parseInt(router.query.slide, 10);\n  const {\n    0: focused,\n    1: setFocused\n  } = useState(false);\n  /**\n   * Checks when user enters (focus) or\n   * leaves (blur) browser window/tab\n   */\n\n  const handleFocus = () => setFocused(true);\n\n  const handleBlur = () => setFocused(false);\n  /**\n   * Updates route or context with local storage data\n   * from event listener\n   * @param {*} e\n   */\n\n\n  const handleStorageChange = e => {\n    const n = parseInt(e.newValue, 10);\n    const syncedSlide = localStorage.getItem(keys.slide); // if (focused) return\n\n    if (Number.isNaN(n)) return;\n\n    switch (e.key) {\n      case keys.page:\n        router.push(`/slides/${parseInt(n, 10)}#${syncedSlide}`);\n        break;\n\n      case keys.slide:\n        window.location.hash = `#${n}`;\n        setSlide(n);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    setFocused(document.hasFocus());\n  }, []);\n  useEffect(() => {\n    if (!focused) window.addEventListener('storage', handleStorageChange);\n    window.addEventListener('focus', handleFocus);\n    window.addEventListener('blur', handleBlur);\n    return () => {\n      if (!focused) window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('focus', handleFocus);\n      window.removeEventListener('blur', handleBlur);\n    };\n  }, [focused]);\n  /**\n   * Sync localstorage with changes to slides or pages\n   */\n\n  useEffect(() => {\n    if (!focused) return;\n    localStorage.setItem(keys.slide, currentSlide);\n    localStorage.setItem(keys.page, currentPage);\n  }, [focused, currentSlide, currentPage]);\n};\nexport const Storage = () => {\n  useStorage();\n  return false;\n};\nexport default useStorage;","map":null,"metadata":{},"sourceType":"module"}